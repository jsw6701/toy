plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.diffplug.spotless' version '6.21.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

    // 유효성 검사
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //Querydsl 추가
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // MapStruct 추가
    implementation "org.mapstruct:mapstruct:1.5.5.Final"
    annotationProcessor "org.mapstruct:mapstruct-processor:1.5.5.Final"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:1.5.5.Final"
    implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    // Spotless 추가
    implementation 'com.diffplug.spotless:spotless-plugin-gradle:6.11.0'
}

spotless {
    java {
        target '**/*.java'
        importOrder 'java', 'javax', 'org', 'com', '' // import 순서
        removeUnusedImports() // 사용되지 않는 import 제거
        googleJavaFormat('1.17.0') // Google Java Format 버전
        indentWithSpaces(4) // 4칸 공백으로 들여쓰기
        trimTrailingWhitespace() // 불필요한 공백 제거
        endWithNewline() // 파일 끝에 개행 추가
    }
    format 'misc', {
        target '**/*.gradle', '**/*.md', '**/*.properties', '**/*.yml'
        indentWithSpaces(2)
        trimTrailingWhitespace()
        endWithNewline()
    }
}

///// Querydsl 빌드 옵션 (옵셔널)
def generated = 'src/main/generated'

///// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

///// QClass 디렉토리가 없더라도 빌드 오류 방지
sourceSets {
    main {
        java {
            srcDirs += [generated]
            // QClass 디렉토리가 없을 경우에도 빌드 오류 방지
            srcDirs = srcDirs.findAll { file(it).exists() }
        }
    }
}

///// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}

tasks.named('test') {
    useJUnitPlatform()
}
